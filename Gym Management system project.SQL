--BATCH TABLE 

CREATE TABLE G_BATCH 
(
BATCH_ID NUMBER(22)PRIMARY KEY,
SESSION_NAME VARCHAR2(20),
BATCH_TIME TIMESTAMP
);

INSERT INTO G_BATCH(BATCH_ID,SESSION_NAME,BATCH_TIME)
VALUES(1,'MORNING YOGA',TO_TIMESTAMP('2023-10-06 09:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(2,'CARDIO WORKOUT',TO_TIMESTAMP('2023-10-06 17:30:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(3,'STRENGTH TRAINING', TO_TIMESTAMP('2023-2-06 12:00:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(4,'ZUMBA FITNESS', TO_TIMESTAMP('2023-2-22 18:00:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(5,'CROSS FIT', TO_TIMESTAMP('2023-3-23 07:30:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(6,'PILATES', TO_TIMESTAMP('2023-4-23 06:00:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(7,'SPINING CLASS',TO_TIMESTAMP('2023-7-21 6:30:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(8,'HIIT WORKOUT', TO_TIMESTAMP('2023-12-25 09:00:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(9,'YOGA FUSION', TO_TIMESTAMP('2023-9-11 18:30:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(10,'BODY PUMP', TO_TIMESTAMP('2023-7-31 18:00:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(11,'KICKBOXING', TO_TIMESTAMP('2023-4-5 19:00:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(12,'TRX TRAINING', TO_TIMESTAMP('2023-7-21 18:00:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(13,'CROSSFIT', TO_TIMESTAMP('2023-9-7 06:00:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(14,'PILATES', TO_TIMESTAMP('2023-8-18 07:00:00','YYYY-MM-DD HH24:MI:SS'));
INSERT INTO G_BATCH VALUES(15,'SPINING CLASS',TO_TIMESTAMP('2023-10-20 05:00:00','YYYY-MM-DD HH24:MI:SS'));


SELECT * FROM G_BATCH; 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- TRAINER  TABLE 


CREATE TABLE TRAINER
(
  TRAINER_ID NUMBER(10) PRIMARY KEY,
  FIRST_NAME VARCHAR2(20),
  LAST_NAME VARCHAR2(20),
  HIRE_DATE DATE,
  SALARY NUMBER(5),
  ADDRESS VARCHAR2(30),
  SPECIALIZATION VARCHAR2(40),
  GENDER VARCHAR2(10) NOT NULL,
  BATCH_ID NUMBER(10),
  CONSTRAINT B_ID FOREIGN KEY (BATCH_ID) REFERENCES G_BATCH(BATCH_ID)
);

INSERT INTO TRAINERS (TRAINER_ID, FIRST_NAME, LAST_NAME, HIRE_DATE, SALARY, ADDRESS, SPECIALIZATION, GENDER, BATCH_ID)
VALUES (1, 'NIKHIL', 'PATIL', TO_DATE('2022-01-02', 'YYYY-MM-DD'), 20000, 'PUNE', 'CARDIO', 'MALE', 1);
INSERT INTO TRAINERS VALUES(2, 'MANGESH', 'KHAIRNAR', TO_DATE('2022-09-02', 'YYYY-MM-DD'), 30000, 'MUMBAI', 'PILATES', 'MALE', 2);
INSERT INTO TRAINERS VALUES(3,'VED','KHAIRNAR',TO_DATE('2022-07-24','YYYY-MM-DD'),50000,'PUNE','ZUMBA FITNESS','MALE',3);
INSERT INTO TRAINERS VALUES(4,'RUDRA','KAIRNAR',TO_DATE('2022-08-11','YYYY-MM-DD'),45000,'THANE','HIIT WORKOUT','MALE',4);                                           
INSERT INTO TRAINERS VALUES(5,'SHUBHANGI','BHAMRE',TO_DATE('2022-09-12','YYYY-MM-DD'),24000,'BARODA','YOGA FUSION','FEMALE',5);
INSERT INTO TRAINERS VALUES(6,'VANSH','SONAWNE',TO_DATE('2023-09-15','YYYY-MM-DD'),34000,'NASIK','SPINING CLASSES','MALE',6);
INSERT INTO TRAINERS VALUES(7,'SWAMINI','KHAIRNAR',TO_DATE('2023-10-12','YYYY-MM-DD'),36000,'VAPI','BODY PUMP','FEMALE',7);
INSERT INTO TRAINERS VALUES(8,'SAKSHI','PATIL',TO_DATE('2019-06-12','YYYY-MM-DD'),12000,'NEW MUMBAI','KICKBOXING','FEMALE',8);
INSERT INTO TRAINERS VALUES(9,'OM','BHAMRE',TO_DATE('2022-06-27','YYYY-MM-DD'),49000,'DHULE','TRX TRAINING','MALE',9);
INSERT INTO TRAINERS VALUES(10,'MAU','PATIL',TO_DATE('2022-09-24','YYYY-MM-DD'),15000,'SURAT','CIRCUIT TRAINING','FEMALE',10);
INSERT INTO TRAINERS VALUES(11,'SUCHI','KHAIRNAR',TO_DATE('2022-07-11','YYYY-MM-DD'),12000,'DHULE','YOGA FUSION','FEMALE',11);
INSERT INTO TRAINERS VALUES(12,'VIJAY','SONAWNE',TO_DATE('2022-07-05','YYYY-MM-DD'),24000,'VAPI','PILATES','MALE',12);
INSERT INTO TRAINERS VALUES(14,'PANKAJ','MEHTE',TO_DATE('2022-08-12','YYYY-MM-DD'),40000,'AMRAVTI','KICKBOXING','FEMALE',14);
INSERT INTO TRAINERS VALUES(13,'KAILAS','SAVLE',TO_DATE('2022-06-22','YYYY-MM-DD'),25000,'THANE','ZUMBA FITNESS','FEMALE',13);
INSERT INTO TRAINERS VALUES(15,'LOKESH','SONAWNE',TO_DATE('2020-07-12','YYYY-MM-DD'),35000,'NAGPUR','STRENGTH TRAINING','FEMALE',15);

SELECT * FROM TRAINERS;

----------------------------------------------------------------------------------------------------
---PACAKGE TABLE 

ALTER TABLE G_PACKAGE
MODIFY G_DURATION VARCHAR2(10);

CREATE TABLE G_PACKAGE 
(
PACKAGE_ID NUMBER(5)PRIMARY KEY,
PACKAGE_NAME VARCHAR2(40),
CHARGES NUMBER(10),
G_DURATION VARCHAR2(10)
);

INSERT INTO G_PACKAGE(PACKAGE_ID,PACKAGE_NAME, CHARGES, G_DURATION )
VALUES(101,'BASIC MEMBERSHIP',100,'1 MOTNH');
INSERT INTO G_PACKAGE VALUES(102,'SILVER MEMBERSHIP',150,'3 MONTHS');
INSERT INTO G_PACKAGE VALUES(103,'GOLD MEMBERSHIP',200,'6 MONTHS');
INSERT INTO G_PACKAGE VALUES(104,'PLATINUM MEMBERSHIP',250,'12 MONTHS');
INSERT INTO G_PACKAGE VALUES(105,'YOGA CLASSES', 75,'1 MONTHS');
INSERT INTO G_PACKAGE VALUES(106,'CARDIO PACAKGE',250,'2 MOTNHS');
INSERT INTO G_PACKAGE VALUES(107,'STRENGTH TRAINING',90,'1 MONTHS');
INSERT INTO G_PACKAGE VALUES(108,'CROSSFIT PACKAGE',120,'2 MONTHS');
INSERT INTO G_PACKAGE VALUES(109,'PILATES MEMBERSHIP',160,'1 MONTHS');
INSERT INTO G_PACKAGE VALUES(110,'SPINING CLASSES',175,'1 MONTHS');
INSERT INTO G_PACKAGE VALUES(111,'HIIT PROGRAM',200,'2 MONTHS');
INSERT INTO G_PACKAGE VALUES(112,'YOGA FUSION',170,'1 MONTHS');
INSERT INTO G_PACKAGE VALUES(113,'BODY PUMP PACKAGE',130,'2 MONTHS');
INSERT INTO G_PACKAGE VALUES(114,'KICKBOXING PACKAGE',80,'1 MONTHS');
INSERT INTO G_PACKAGE VALUES(115,'TRX TRAINING',110,'1 MONTHS');

SELECT * FROM G_PACKAGE;

--------------------------------------------------------------------------------------------------------------------------

--TABLE MEMBERS

CREATE TABLE MEMBERS
(
MEMB_ID NUMBER(5),
FIRST_NAME VARCHAR2(10),
LAST_NAME VARCHAR2(10),
PHONE_NUMBER NUMBER(14),
EMAIL VARCHAR2(40),
ADDRESS VARCHAR2(30),
DOB DATE,
GENDER VARCHAR2(8)NOT NULL ,
JOINING_DATE DATE NOT NULL ,
TRAINER_ID NUMBER(5),
PACKAGE_ID NUMBER(5),
CONSTRAINT PK_MEMBERS PRIMARY KEY (MEMB_ID),
CONSTRAINT T_ID FOREIGN KEY (TRAINER_ID) REFERENCES TRAINERS(TRAINER_ID),
CONSTRAINT P_ID FOREIGN KEY (PACKAGE_ID) REFERENCES G_PACKAGE(PACKAGE_ID)
);

INSERT INTO MEMBERS(MEMB_ID, FIRST_NAME,LAST_NAME,PHONE_NUMBER,EMAIL,ADDRESS,DOB,GENDER,JOINING_DATE,TRAINER_ID,PACKAGE_ID)
VALUES(1,'AJJU','BORSE',3456898356,'AJJU34@GMAIL.COM','NASIK CITY',TO_DATE('2000-MAR-22','YYYY-MON-DD'),'MALE',TO_DATE('2023-JAN-22','YYYY-MON-DD'),1,101);
INSERT INTO MEMBERS VALUES(2,'PRAVIN','PATIL',4567231290,'PRAVIN23@GMAIL.COM','PUNE GRAMIN',TO_DATE('2002-FEB-24','YYYY-MON-DD'),'MALE',TO_DATE('2022-JAN-4','YYYY-MON-DD'),2,102);
INSERT INTO MEMBERS VALUES(3,'VIKAS','KHAIRNAR',3455128965,'VIKAS22@GMAILCOM','NAGPUR',TO_DATE('1985-MAY-22','YYYY-MON-DD'),'MALE',TO_DATE('2022-MAR-13','YYYY-MON-DD'),3,103);
INSERT INTO MEMBERS VALUES(4,'SOHAM','PATIL',3456119011,'SOHAM23@GMAIL.COM','THANE',TO_DATE('1999-AUG-11','YYYY-MON-DD'),'MALE',TO_DATE('2023-JUN-25','YYYY-MON-DD'),4,104);
INSERT INTO MEMBERS VALUES(5,'PRAFULL','NERE',8767688551,'PRAFULL0523@GMAIL.COM','NAVI MUMBAI',TO_DATE('2000-APR-22','YYYY-MON-DD'),'MALE',TO_DATE('2022-SEP-22','YYYY-MM-DD'),5,105);
INSERT INTO MEMBERS VALUES(6,'KOMAL','PATIL',9075223455,'KOMAL0604@GMAIL.COM','NANDED',TO_DATE('1999-MAR-11','YYYY-MON-DD'),'FEMALE',TO_DATE('2021-JUL-27','YYYY-MON-DD'),6,106);
INSERT INTO MEMBERS VALUES(7,'MANU','PATIL',2378442311,'MANU90@GMAIL.COM','MUMBAI',TO_DATE('2001-MAY-3','YYYY-MON-DD'),'FMALE',TO_DATE('2022-AUG-29','YYYY-MON-DD'),7,107);
INSERT INTO MEMBERS VALUES(8,'SONU','BHAMRE',9313890390,'SONU0501@GMAIL.COM','VAPI',TO_DATE('2003-APR-14','YYYY-MON-DD'),'FEMALE',TO_DATE('2023-JULY-24','YYYY-MON-DD'),8,108);
INSERT INTO MEMBERS VALUES(9,'SWATI','KHAIRNAR',9890123422,'SWATI009@GMAIL.COM','NAVI MUMBAI',TO_DATE('1999-AUG-18','YYYY-MON-DD'),'FEMALE',TO_DATE('2023-OCT-30','YYYY-MON-DD'),9,109);
INSERT INTO MEMBERS VALUES(10,'SAI','BORSE',23890989,'SAI2311@GMAIL.COM','NAGAR',TO_DATE('2003-DEC-31','YYYY-MON-DD'),'MALE',TO_DATE('2022-APR-25','YYYY-MON-DD'),10,110);
INSERT INTO MEMBERS VALUES(11,'NIK','PATIL',9737128048,'NIK1123@GMAIL.COM','BARODA',TO_DATE('2001-NOV-22','YYYY-MON-DD'),'MALE',TO_DATE('2022-MAY-21','YYYY-MON-DD'),11,111);
INSERT INTO MEMBERS VALUES(12,'RUSHI','PATIL',9022345612,'RUSHI0211@GMAIL.COM','NASIK',TO_DATE('2003-APR-24','YYYY-MON-DD'),'MALE',TO_DATE('2022-JAN-29','YYYY-MON-DD'),12,112);
INSERT INTO MEMBERS VALUES(13,'NILAM','DEORE',890923112,'NILAM0211@GMAIL.COM','DHULE',TO_DATE('2002-OCT-23','YYYY-MON-DD'),'FEMALE',TO_DATE('2022-FEB-12','YYYY-MON-DD'),13,113);
INSERT INTO MEMBERS VALUES(14,'ASHWINI','PATIL',29231190,'ASHU1211@GMAIL.COM','PUNE',TO_DATE('2001-FEB-11','YYYY-MON-DD'),'FEMALE',TO_DATE('2021-NOV-16','YYYY-MON-DD'),14,114);
INSERT INTO MEMBERS VALUES(15,'ANU','PATIL',9075616809,'ANU121@GMAIL.COM','JALGAON',TO_DATE('2003-JUN-11','YYYY-MON-DD'),'FEMALE',TO_DATE('2022-MAR-11','YYYY-MON-DD'),15,115);


SELECT * FROM MEMBERS;
-----------------------------------------------------------------------------------------------------------------------------------------------

----PHYSICAL DETAILS 


CREATE TABLE PHY_DETAILS
(
PHY_ID NUMBER(5)PRIMARY KEY,
CURR_DATE DATE,
AGE NUMBER(10),
BEFORE_WEIGHT NUMBER(5),
AFTER_WEIGHT NUMBER(5),
BEFORE_HEIGHT NUMBER(5),
AFTER_HEIGHT NUMBER(5),
BLOOD_GROUP VARCHAR2(5),
MEMB_ID NUMBER (5),
CONSTRAINT MP_ID FOREIGN KEY (MEMB_ID) REFERENCES MEMBERS(MEMB_ID)
);



INSERT INTO PHY_DETAILS (PHY_ID, CURR_DATE, AGE, BEFORE_WEIGHT, AFTER_WEIGHT, BEFORE_HEIGHT, AFTER_HEIGHT, BLOOD_GROUP, MEMB_ID)
VALUES (1, TO_DATE('2022-08-23', 'YYYY-MM-DD'), 21, 45, 65, 165, 167, 'A+', 1);
INSERT INTO PHY_DETAILS VALUES(2,TO_DATE('2023-09-26','YYYY-MM-DD'),25,45,55,156,159,'B-',2);
INSERT INTO PHY_DETAILS VALUES(3,TO_DATE('2023-08-12','YYYY-MM-DD'),26,48,52,149,1152,'O+',3);
INSERT INTO PHY_DETAILS VALUES(4,TO_DATE('2022-09-22','YYYY-MM-DD'),23,65,50,155,159,'AB+',4);
INSERT INTO PHY_DETAILS VALUES(5,TO_DATE('2021-04-16','YYYY-MM-DD'),24,42,48,152,154,'A-',5);
INSERT INTO PHY_DETAILS VALUES(6,TO_DATE('2023-02-17','YYYY-MM-DD'),31,65,60,149,153,'B+',6);
INSERT INTO PHY_DETAILS VALUES(7,TO_DATE('2021-07-21','YYYY-MM-DD'),35,50,55,133,137,'O-',7);
INSERT INTO PHY_DETAILS VALUES(8,TO_DATE('2022-11-30','YYYY-MM-DD'),40,70,60,122,127,'O+',8);
INSERT INTO PHY_DETAILS VALUES(9,TO_DATE('2020-12-31','YYYY-MM-DD'),36,75,70,148,148,'B-',9);
INSERT INTO PHY_DETAILS VALUES(10,TO_DATE('2021-03-05','YYYY-MM-DD'),21,45,50,140,143,'AB+',10);
INSERT INTO PHY_DETAILS VALUES(11,TO_DATE('2022-01-09','YYYY-MM-DD'),23,50,52,133,134,'A-',11);
INSERT INTO PHY_DETAILS VALUES(12,TO_DATE('2021-02-11','YYYY-MM-DD'),20,49,55,144,149,'B+',12);
INSERT INTO PHY_DETAILS VALUES(13,TO_DATE('2022-11-09','YYYY-MM-DD'),32,50,55,139,143,'0+',13);
INSERT INTO PHY_DETAILS VALUES(14,TO_DATE('2023-05-11','YYYY-MM-DD'),19,40,50,134,139,'AB+',14);
INSERT INTO PHY_DETAILS VALUES(15,TO_DATE('2022-01-06','YYYY-MM-DD'),32,49,53,145,146,'A-',15);



SELECT * FROM PHY_DETAILS ;

















--PAYMENT TABLE 

CREATE TABLE PAYMENT
(
  PAY_ID NUMBER(4) PRIMARY KEY,
  AMOUNT NUMBER(4),
  P_DATE_TIME TIMESTAMP,
  MEMB_ID NUMBER(4),
  CONSTRAINT M_ID FOREIGN KEY (MEMB_ID) REFERENCES MEMBERS(MEMB_ID)
);

INSERT INTO PAYMENT(PAY_ID, AMOUNT, P_DATE_TIME,MEMB_ID)
VALUES(1,200,TO_TIMESTAMP('2023-10-06 09:00:00','YYYY-MM-DD HH24:MI:SS'),1);

INSERT INTO PAYMENT VALUES(2,250,TO_TIMESTAMP('2023-11-02 11:00:00','YYYY-MM-DD HH24:MI:SS'),2);
INSERT INTO PAYMENT VALUES(3,110,TO_TIMESTAMP('2022-12-01 08:00:00','YYYY-MM-DD HH24:MI:SS'),3);
INSERT INTO PAYMENT VALUES(4,180,TO_TIMESTAMP('2022-09-11 09:15:00','YYYY-MM-DD HH24:MI:SS'),4);
INSERT INTO PAYMENT VALUES(5,150,TO_TIMESTAMP('2021-05-10 11:10:00','YYYY-MM-DD HH24:MI:SS'),5);
INSERT INTO PAYMENT VALUES(6,200,TO_TIMESTAMP('2022-03-11 05:00:00','YYYY-MM-DD HH24:MI:SS'),6);
INSERT INTO PAYMENT VALUES(7,250,TO_TIMESTAMP('2022-01-11 06:00:00','YYYY-MM-DD HH24:MI:SS'),7);
INSERT INTO PAYMENT VALUES(8,180,TO_TIMESTAMP('2021-01-01 04:00:00','YYYY-MM-DD HH24:MI:SS'),8);
INSERT INTO PAYMNET VALUES(9,140,TO_TIMESTAMP('2022-04-30 08:00:00','YYYY-MM-DD HH24:MI:SS'),9);
INSERT INTO PAYMENT VALUES(10,275,TO_TIMESTAMP('2021-12-31 05:00:00','YYYY-MM-DD HH24:MI:SS'),10);
INSERT INTO PAYMENT VALUES(11,170,TO_TIMESTAMP('2020-11-21 06:00:00','YYYY-MM-DD HH24:MI:SS'),11);
INSERT INTO PAYMENT VALUES(12,125,TO_TIMESTAMP('2022-02-11 02:00:00','YYYY-MM-DD HH24:MI:SS'),12);
INSERT INTO PAYMENT VALUES(13,185,TO_TIMESTAMP('2021-03-02 05:00:00','YYYY-MM-DD HH24:MI:SS'),13);
INSERT INTO PAYMENT VALUES(14,150,TO_TIMESTAMP('2022-11-01 04:00:00','YYYY-MM-DD HH24:MI:SS'),14);
INSERT INTO PAYMENT VALUES(15,180,TO_TIMESTAMP('2021-04-03 05:00:00','YYYY-MM-DD HH24:MI:SS'),15);

SELECT * FROM PAYMENT ;
----------------------------------------------------------------------------------------------------------------------------------------------


CREATE TABLE ATTENDANCE
(
    MEMB_ID NUMBER(5),
    DATE_TIME TIMESTAMP,
    STATUS VARCHAR2(7),
    CONSTRAINT MT_ID FOREIGN KEY (MEMB_ID) REFERENCES MEMBERS (MEMB_ID)
);

DROP TABLE ATTENDANCE;


INSERT INTO ATTENDANCE (MEMB_ID,DATE_TIME,STATUS)
VALUES(1,TO_TIMESTAMP('2023-08-22 06:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(2,TO_TIMEATAMP('2023-11-02 11:00:00','YYYY-MM-DD HH24:MI:SS'),'ABSENT');
INSERT INTO ATTENDANCE VALUES(3,TO_TIMESTAMP('2022-08-21 18:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(4,TO_TIMESTAMP('2023-09-11 17:30:00','YYYY-MM-DD HH24:MI:SS'),'ABSENT'); 
INSERT INTO ATTENDANCE VALUES(5,TO_TIMESTAMP('2022-07-14 03:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(6,TO_TIMESTAMP('2022-07-14 07:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(7,TO_TIMESTAMP('2022-01-11 10:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(8,TO_TIMESTAMP('2022-07-14 18:30:00','YYYY-MM_DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(9,TO_TIMESTAMP('2022-03-14 17:30:00','YYYY-MM_DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(10,TO_TIMESTAMP('2022-07-14 08:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(11,TO_TIMESTAMP('2022-07-14 16:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(12,TO_TIMESTAMP('2022-07-14 11:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(13,TO_TIMSETAMP('2022-07-14 12:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(14,TO_TIMESTAMP('2022-07-14 17:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');
INSERT INTO ATTENDANCE VALUES(15,TO_TIMESTAMP('2022-07-14 16:00:00','YYYY-MM-DD HH24:MI:SS'),'PRESENT');

SELECT * FROM ATTENDANCE;

--------------------------------------------------------------------------------------------------------------------------------------------------

---1)Retrieve all records from the MEMBERS table.

select * from MEMBERS;

--2)Retrieve the names and specialization of trainers.

SELECT  first_name||last_name trainer_name ,  specialization
FROM trainers;

--3)List all the packages with their charges.

SELECT CHARGES, PACKAGE_NAME 
FROM G_PACKAGE;

--4)Fetch the batch details with their session names.

SELECT  BATCH_ID,SESSION_NAME 
FROM G_BATCH;

--5) Retrieve the members who joined after '2022-01-01'.

SELECT *
FROM MEMBERS
WHERE JOINING_DATE > TO_DATE('2022-01-01', 'YYYY-MM-DD');

--6) Find the total count of members in each batch.

SELECT BATCH_ID, SESSION_NAME, COUNT(MEMB_ID) AS TOTAL_MEMBERS
FROM ATTENDANCE A
JOIN G_BATCH B ON A.MEMB_ID = B.BATCH_ID
GROUP BY BATCH_ID, SESSION_NAME
ORDER BY BATCH_ID;

--7)List the members who have a 'PLATINUM MEMBERSHIP'.

SELECT  M.FIRST_NAME,M.LAST_NAME
FROM MEMBERS M JOIN G_PACKAGE G 
ON M.PACKAGE_ID = P.PACKAGE_ID
WHERE P.PACKAGE_NAME = 'PLATINUM MEMBERSHIP';

--8) Get the total count of members in each gender.

SELECT COUNT(* ),GENDER
FROM MEMBERS
GROUP BY GENDER;

--9)Find the average salary of trainers.

SELECT AVG(SALARY)
FROM TRAINERS;

--10) Retrieve the names of members who have attended a class on '21-08-22'.

SELECT M.FISRT_NAME,L.LAST_NAME
FROM MEMBERS M JOIN ATTENDANCE A 
ON M.MEMB_ID = A.ATTENDANCE 
WHERE A.P_DATE_TIME >= TO_TIMESTAMP('21-08-22','YYYY-MM-DD','HH24:MI:SS')
WHERE A.P_DATE_TIME < TO_TIMESTAMP('22-08-22','YYYY-MM-DD','HH24:MI:SS')
AND A.STATUS = 'PRESENT';

---11)List the trainers who have more than 2 years of experience.

SELECT FIRST_NAME || LAST_NAME AS TRIANER_NAME 
FROM TRAINERS
WHERE MONTHS_BETWEEN(SYSDATE,HIRE_DATE)>24;


--12) GET THE DETAILS OF MEMBERS WHO HAVE PAID MORE THAN 200

SELECT M.MEMB_ID,  M.FIRST_NAME, M.LAST_NAME,P.AMOUNT,P.P_DATE_TIME 
FROM MEMBERS M JOIN PAYMENT P
ON M.MEMB_ID = P.MEMB_ID 
WHERE P.AMOUNT > 200;

--13)Find the total number of members who have attended a class.

SELECT COUNT(DISTINCT MEMB_ID)AS TOTAL_ATTENDING_MEMBERS
FROM ATTENDANCE 
WHERE STATUS = 'PRESENT'

--14) List the batch names and session names along with the total number of members in each batch.


SELECT B.BATCH_ID, B.SESSION_NAME,COUNT(M.MEMB_ID)AS TOTAL_MEMBERS
FROM G_BATCH B JOIN MEMBERS M
ON B.BATCH_ID = M.BATCH_ID
GROUP BY B.BATCH_ID, B.SESSION_NAME ;


--15) Retrieve the members who have attended all classes.

SELECT M.MEMB_ID, M.FIRST_NAME, M.LAST_NAME
FROM MEMBERS M
WHERE NOT EXISTS (
    SELECT DISTINCT B1.BATCH_ID
    FROM G_BATCH B1
    WHERE NOT EXISTS (
        SELECT B2.BATCH_ID
        FROM ATTENDANCE A JOIN G_BATCH B2 
        ON B2.BATCH_ID = B2.BATCH_ID
        WHERE A.MEMB_ID = M.MEMB_ID
    )
);

---16)Find the names of members who have not attended any classes.

SELECT M. FIRST_NAME, M.LAST_NAME 
FROM MEMBERS M
WHERE M. MEMB_ID NOT IN(SELECT A.MEMB_ID 
                     FROM  ATTENDANCE A);


--17)Get the members who have a membership longer than 6 months.

SELECT M.MEMB_ID,M.FIRST_NAME,M.LAST_NAME,P.PACKAGE_NAME,P.G_DURATION
FROM MEMBERS M JOIN G_PACKAGE P 
ON M.PACKAGE_ID = P.PACKAGE_ID
WHERE MONTHS_BETWEEN(SYSDATE,JOINING_DATE)<=2;


SELECT M.MEMB_ID, M.FIRST_NAME, M.LAST_NAME, P.PACKAGE_NAME, P.G_DURATION
FROM MEMBERS M
JOIN G_PACKAGE P ON M.PACKAGE_ID = P.PACKAGE_ID
WHERE MONTHS_BETWEEN(SYSDATE, M.JOINING_DATE) > 2;




SELECT 
    M.MEMB_ID,
    M.FIRST_NAME,
    M.LAST_NAME,
    P.PACKAGE_NAME,
    P.G_DURATION
FROM 
    MEMBERS M
JOIN 
    G_PACKAGE P ON M.PACKAGE_ID = P.PACKAGE_ID
WHERE 
    P.G_DURATION > 2;
    
--18)List the batch  where the average age of members is greater than 25.    


SELECT b.BATCH_ID, b.SESSION_NAME, b.BATCH_TIME
FROM G_BATCH b
JOIN TRAINERS  t 
ON b.BATCH_ID = t.BATCH_ID
JOIN MEMBERS  m 
ON t.TR_ID = m.TRAINER_ID
JOIN PHYSICAL_DETAILS p 
ON m.MEMB_ID = p.MEMB_ID
GROUP BY b.BATCH_ID, b.SESSION_NAME, b.BATCH_TIME
HAVING AVG(p.AGE) > 25;


--19)Retrieve the top 3 highest paying members.



SELECT M.MEMB_ID, M.FIRST_NAME, M.LAST_NAME
FROM MEMBERS M
WHERE NOT EXISTS (
    SELECT DISTINCT B1.BATCH_ID
    FROM G_BATCH B1
    WHERE NOT EXISTS (
        SELECT B2.BATCH_ID
        FROM ATTENDANCE A JOIN G_BATCH B2 
        ON G.BATCH_ID = B2.BATCH_ID
        WHERE A.MEMB_ID = M.MEMB_ID
    )
);





--20)Calculate the total revenue generated by the gym

SELECT  SUM(AMOUNT)AS REVENUE 
FROM PAYMENT;

--21) Find the trainer with the highest salary and display their details.

SELECT *
FROM TRAINERS
WHERE SALARY = (SELECT MAX(SALARY) FROM TRAINERS);

---OR

SELECT *
FROM (
    SELECT TRAINERS. TRAINER_ID,FIRST_NAME, LAST_NAME,SALARY, RANK() OVER (ORDER BY SALARY DESC) AS salary_rank
    FROM TRAINERS
)
WHERE salary_rank =10;


--22) Identify the package with the maximum duration and list its details.

SELECT * 
FROM G_PACKAGE 
WHERE G_DURATION = ( SELECT MAX(G_DURATION)FROM G_PACKAGE);

---23) Retrieve the members who joined in the year 2022.

SELECT *
FROM MEMBERS
WHERE EXTRACT(YEAR FROM "JOINING_DATE") = 2022;

SELECT *
FROM MEMBERS
WHERE TO_CHAR("JOINING_DATE", 'YYYY') = '2022';


--24) Display the BATCH_ID and SESSION_NAME for batches where the number of members is greater than 5.

SELECT B.BATCH_ID, B.SESSION_NAME
FROM G_BATCH B JOIN TRAINERS T 
ON B.BATCH_ID = T.BATCH_ID
JOIN MEMBERS  M 
ON T.TRAINER_ID = M.TRAINER_ID
GROUP BY B.BATCH_ID, B.SESSION_NAME
HAVING COUNT(M.MEMB_ID)>2;

--25) Calculate the BMI (Body Mass Index) = {BMI} for each member using the BEFORE_WEIGHT and BEFORE_HIGT columns in the PHYSICAL DETAILS table.

SELECT MEMB_ID,
       CURR_DATE,
       BEFORE_WEIGHT,
       BEFORE_HEIGHT,
       (BEFORE_WEIGHT / (BEFORE_HEIGHT / 100) / (BEFORE_HEIGHT / 100)) AS BMI
FROM PHY_DETAILS;


/*
AS BMI: This part calculates the BMI using the formula BMI = weight (kg) / (height (m) * height (m)). 
In the formula, weight is divided by 100 to convert it from grams to kilograms, 
and height is divided by 100 to convert it from centimeters to meters.
*/

---26)List the members who made a payment after joining the gym. 

SELECT M.MEMB_ID, M.FIRST_NAME, M.LAST_NAME, M.JOINING_DATE, P.AMOUNT, P.P_DATE_TIME
FROM MEMBERS M JOIN PAYMENT P 
ON M.MEMB_ID = P.MEMB_ID
WHERE P.P_DATE_TIME > M.JOINING_DATE;

--27) Find the batch with the earliest BATCH_TIME.


--28)Determine the top 3 trainers with the highest total earnings.


SELECT TR.TR_ID,TR.F_NAME || ' ' || TR.L_NAME AS TRAINER_NAME,SUM(PA.AMOUNT) AS TOTAL_EARNINGS
FROM TRAINER TR JOIN MEMBERS ME 
ON TR.TR_ID = ME.TRAINER_ID
JOIN PAYMENT_TABLE PA 
ON ME.MEMB_ID = PA.MEMB_ID
GROUP BY TR.TR_ID, TR.F_NAME, TR.L_NAME
ORDER BY TOTAL_EARNINGS DESC
FETCH FIRST 3 ROWS ONLY;

--29)Calculate the average salary for male and female trainers separately.
 
SELECT GENDER, AVG(SALARY) AS AVERAGE_SALARY
FROM TRAINERS
GROUP BY GENDER;

--30)Retrieve the members who have not attended any sessions.

SELECT M.MEMB_ID, M.FIRST_NAME, M.LAST_NAME
FROM MEMBERS M
WHERE M.MEMB_ID NOT IN (
    SELECT DISTINCT A.MEMB_ID
    FROM ATTENDANCE A
);

--31) SELECT SESSION_NAME, COUNT(*) AS ATTENDANCE_COUNT
FROM ATTENDANCE A
JOIN BATCH_TABLE B ON A.MEMB_ID = B.BATCH_ID
GROUP BY SESSION_NAME
ORDER BY ATTENDANCE_COUNT DESC
FETCH FIRST 1 ROWS ONLY;

--32)







-----------------
--Procedure 

--1) Display Trainser information 

CREATE OR REPLACE PROCEDURE TR_INF
AS
BEGIN
FOR TRAIN_REC IN (SELECT * FROM TRAINERS)
LOOP
DBMS_OUTPUT.PUT_LINE(TRAIN_REC.FIRST_NAME||''||TRAIN_REC.LAST_NAME||''||TRAIN_REC.HIRE_DATE||''||TRAIN_REC.SPECIALIZATION);
END LOOP;
END;

EXECUTE TR_INF;


CREATE OR REPLACE PROCEDURE display_trainer_info AS
BEGIN
  FOR TRAIN_REC IN (SELECT * FROM Trainers)
  LOOP
    DBMS_OUTPUT.PUT_LINE(TRAIN_REC.FIRST_NAME||''||TRAIN_REC.LAST_NAME||''||TRAIN_REC.HIRE_DATE||''||TRAIN_REC.SPECIALIZATION);
--('Trainer ID: ' || trainer_rec.Trainer_ID || ', Name: ' || trainer_rec.First_Name || ' ' || trainer_rec.Last_Name || ', Specialization: ' || trainer_rec.Specialization);
  END LOOP;
END;



SELECT * FROM TRAINERS ;


CREATE OR REPLACE PROCEDURE GM(BID NUMBER)
AS 
T_ID NUMBER(10);
F_NAME NUMBER(10);
L_NAME NUMBER(10);
SAL NUMBER(10);
CURSOR TR IS 
SELECT TRAINER_ID, FIRST_NAME, LAST_NAME, SALARY 
FROM TRAINERS
WHERE BATCH_ID = BID;
BEGIN 
FOR GYM_IN IN TR
LOOP 
DBMS_OUTPUT.PUT_LINE(GYM_IN.FIRST_NAME||''||GYM_IN.LAST_NAME||''||GYM_IN.SALARY);
END LOOP;
END;


EXECUTE GM (2);



--- Gym Management 

CREATE OR REPLACE PROCEDURE GK(DID NUMBER)
IS 
E.FNAME VARCHAR2(10);
E.LNAME VARCHAR2(10);
E.SAL NUMBER(10);
E.MAIL VARCHAR2(10);
D.DEPT_NAME VARCHAR2(10);
CURSOR TPR  IS  
SELECT E.FIRST_NAME, E,LAST_NAME,E.SALARY,E.EMAIL, D.DEPARTMENT_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
BEGIN 
FOR MPA IN TPR
LOOP DBMS_OUTPUT.PUT_LINE(MPA.E.FIRST_NAME||''||MPA.E.LAST_NAME||''||MPA.E.SALARY||''||MPA.E.EMAIL||''||MPA.D.DEPARTMENT_NAME);
END LOOP;
END;












CREATE OR REPLACE PROCEDURE GK(DID NUMBER)
IS 
  E_FNAME EMPLOYEES.F_NAME%TYPE;
  E_LNAME EMPLOYEES.L_NAME%TYPE;
  E_SAL EMPLOYEES.SALARY%TYPE;
  E_EMAIL EMPLOYEES.EMAIL%TYPE;
  D_DEPT_NAME DEPARTMENTS.DEPT_NAME%TYPE;

  CURSOR TPR IS  
  SELECT E.FIRST_NAME, E.LAST_NAME, E.SALARY, E.EMAIL, D.DEPARTMENT_NAME
  FROM EMPLOYEES E 
  JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
  WHERE E.DEPARTMENT_ID = DID;

BEGIN 
  FOR MPA IN TPR
  LOOP 
    DBMS_OUTPUT.PUT_LINE(MPA.E_FIRST_NAME || ' ' || MPA.E_LAST_NAME || ' ' || MPA.E_SALARY || ' ' || MPA.E_EMAIL || ' ' || MPA.D_DEPARTMENT_NAME);
  END LOOP;
END;





CREATE OR REPLACE PROCEDURE GetEmployeeDetails AS
BEGIN

FOR emp_rec IN (
    SELECT e.EMPloyee_ID, e.FIRST_NAME, e.LAST_NAME, e.EMAIL, e.PHONE_NUMBER, e.HIRE_DATE,
           j.JOB_TITLE, d.DEPARTMENT_NAME, l.CITY, l.COUNTRY_ID
      FROM EMPLOYEES e
      JOIN JOBS j ON e.JOB_ID = j.JOB_ID
      JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
      JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID
      WHERE e.SALARY > 5000
  )
  LOOP
    DBMS_OUTPUT.PUT_LINE('Employee ID: ' || emp_rec.EMPLOYEE_ID ||
                         ', Name: ' || emp_rec.First_NAME || ' ' || emp_rec.LAST_NAME ||
                         ', Email: ' || emp_rec.EMAIL ||
                         ', Phone: ' || emp_rec.PHONE_NUMBER ||
                         ', Hire Date: ' || emp_rec.HIRE_DATE ||
                         ', Job Title: ' || emp_rec.JOB_TITLE ||
                         ', Department: ' || emp_rec.DEPARTMENT_NAME ||
                         ', Location: ' || emp_rec.CITY || ', ' || emp_rec.COUNTRY_ID);
  END LOOP;
END GetEmployeeDetails;

EXECUTE GetEmployeeDetails;


---CREATE OR REPLACE PROCEDURE display_expired_members AS
CREATE OR REPLACE PROCEDURE EXPIRED_MEMBER
BEGIN
  FOR member_rec IN (SELECT * FROM Members WHERE SYSDATE > ADD_MONTHS(Joining_Date, (SELECT G_Duration FROM Packages WHERE Package_ID = member_rec.Package_ID)))
  LOOP
    DBMS_OUTPUT.PUT_LINE('Member ID: ' || member_rec.Mid || ', Name: ' || member_rec.First_Name || ' ' || member_rec.Last_Name);
  END LOOP;
END;



--Procedure to Display Members in a Specific Class:

CREATE OR REPLACE PROCEDURE (  VARCHAR2)


-------------- FUNCTION 


--Get Member Next Payment Date

CREATE OR REPLACE PROCEDURE NEXTPAY_DATE(P_MID NUMBER)
RETURN DATE 
IS 
NEXT_PAY_DATE DATE;
BEGIN 
SELECT MAX(P_DATE_TIME)INTO NEXT_PAY_DATE
FROM PAYMENTS 
WHERE MEMB_ID = P_MID;
RETURN NEXT_PAY_DATE ;
END ; 



--Calculate Member BMI Status

CREATE OR REPLACE PROCEDURE BMI_STATUS (M_ID NUMBER) 
RETURN  VARCHAR2
IS
BMI_STATUS VARCHAR2 (20);
BMI_NUMBER NUMBER ;
BEGIN 
V_BMI := CALCULATE_BMI(M_ID);
IF V_BMI <18.5 THEN 
BMI_STATUS := 'UNDERWEIGHT';
ELSIF V_BMI >= 18.5 THEN V_BMI < 25 THEN 
BMI_STATUS := 'NORMAL';
ELSIF V_BMI >= 25 AND V_BMI < 30 THEN 
BMI_STATUS := 'OBESE';
END IF;
RETURN V_BMI_STATUS;
END ;
















